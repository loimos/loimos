// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distribution.proto

#include "distribution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_distribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dist_Histogram_Bin_distribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_distribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_Def_distribution_2eproto;
class Time_DefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Time_Def> _instance;
} _Time_Def_default_instance_;
class Dist_UniformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dist_Uniform> _instance;
} _Dist_Uniform_default_instance_;
class Dist_NormalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dist_Normal> _instance;
} _Dist_Normal_default_instance_;
class Dist_ForeverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dist_Forever> _instance;
} _Dist_Forever_default_instance_;
class Dist_Histogram_BinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dist_Histogram_Bin> _instance;
} _Dist_Histogram_Bin_default_instance_;
class Dist_HistogramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dist_Histogram> _instance;
} _Dist_Histogram_default_instance_;
class Dist_FixedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dist_Fixed> _instance;
} _Dist_Fixed_default_instance_;
static void InitDefaultsscc_info_Dist_Fixed_distribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Dist_Fixed_default_instance_;
    new (ptr) ::Dist_Fixed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Dist_Fixed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dist_Fixed_distribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dist_Fixed_distribution_2eproto}, {
      &scc_info_Time_Def_distribution_2eproto.base,}};

static void InitDefaultsscc_info_Dist_Forever_distribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Dist_Forever_default_instance_;
    new (ptr) ::Dist_Forever();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Dist_Forever::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dist_Forever_distribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dist_Forever_distribution_2eproto}, {}};

static void InitDefaultsscc_info_Dist_Histogram_distribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Dist_Histogram_default_instance_;
    new (ptr) ::Dist_Histogram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Dist_Histogram::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dist_Histogram_distribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dist_Histogram_distribution_2eproto}, {
      &scc_info_Dist_Histogram_Bin_distribution_2eproto.base,}};

static void InitDefaultsscc_info_Dist_Histogram_Bin_distribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Dist_Histogram_Bin_default_instance_;
    new (ptr) ::Dist_Histogram_Bin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Dist_Histogram_Bin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dist_Histogram_Bin_distribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dist_Histogram_Bin_distribution_2eproto}, {
      &scc_info_Time_Def_distribution_2eproto.base,}};

static void InitDefaultsscc_info_Dist_Normal_distribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Dist_Normal_default_instance_;
    new (ptr) ::Dist_Normal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Dist_Normal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dist_Normal_distribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dist_Normal_distribution_2eproto}, {
      &scc_info_Time_Def_distribution_2eproto.base,}};

static void InitDefaultsscc_info_Dist_Uniform_distribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Dist_Uniform_default_instance_;
    new (ptr) ::Dist_Uniform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Dist_Uniform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dist_Uniform_distribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dist_Uniform_distribution_2eproto}, {
      &scc_info_Time_Def_distribution_2eproto.base,}};

static void InitDefaultsscc_info_Time_Def_distribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Time_Def_default_instance_;
    new (ptr) ::Time_Def();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Time_Def::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_Def_distribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Time_Def_distribution_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_distribution_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_distribution_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_distribution_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_distribution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Time_Def, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Time_Def, days_),
  PROTOBUF_FIELD_OFFSET(::Time_Def, hours_),
  PROTOBUF_FIELD_OFFSET(::Time_Def, minutes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Dist_Uniform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Dist_Uniform, tmin_),
  PROTOBUF_FIELD_OFFSET(::Dist_Uniform, tmax_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Dist_Normal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Dist_Normal, tmean_),
  PROTOBUF_FIELD_OFFSET(::Dist_Normal, tstdev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Dist_Forever, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Dist_Histogram_Bin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Dist_Histogram_Bin, tval_),
  PROTOBUF_FIELD_OFFSET(::Dist_Histogram_Bin, with_prob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Dist_Histogram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Dist_Histogram, bin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Dist_Fixed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Dist_Fixed, time_in_state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Time_Def)},
  { 8, -1, sizeof(::Dist_Uniform)},
  { 15, -1, sizeof(::Dist_Normal)},
  { 22, -1, sizeof(::Dist_Forever)},
  { 27, -1, sizeof(::Dist_Histogram_Bin)},
  { 34, -1, sizeof(::Dist_Histogram)},
  { 40, -1, sizeof(::Dist_Fixed)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Time_Def_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Dist_Uniform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Dist_Normal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Dist_Forever_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Dist_Histogram_Bin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Dist_Histogram_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Dist_Fixed_default_instance_),
};

const char descriptor_table_protodef_distribution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022distribution.proto\"8\n\010Time_Def\022\014\n\004days"
  "\030\001 \001(\005\022\r\n\005hours\030\002 \001(\005\022\017\n\007minutes\030\003 \001(\005\"@"
  "\n\014Dist_Uniform\022\027\n\004tmin\030\001 \001(\0132\t.Time_Def\022"
  "\027\n\004tmax\030\002 \001(\0132\t.Time_Def\"B\n\013Dist_Normal\022"
  "\030\n\005tmean\030\001 \001(\0132\t.Time_Def\022\031\n\006tstdev\030\002 \001("
  "\0132\t.Time_Def\"\016\n\014Dist_Forever\"e\n\016Dist_His"
  "togram\022 \n\003bin\030\001 \003(\0132\023.Dist_Histogram.Bin"
  "\0321\n\003Bin\022\027\n\004tval\030\001 \001(\0132\t.Time_Def\022\021\n\twith"
  "_prob\030\002 \001(\001\".\n\nDist_Fixed\022 \n\rtime_in_sta"
  "te\030\001 \001(\0132\t.Time_Defb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_distribution_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_distribution_2eproto_sccs[7] = {
  &scc_info_Dist_Fixed_distribution_2eproto.base,
  &scc_info_Dist_Forever_distribution_2eproto.base,
  &scc_info_Dist_Histogram_distribution_2eproto.base,
  &scc_info_Dist_Histogram_Bin_distribution_2eproto.base,
  &scc_info_Dist_Normal_distribution_2eproto.base,
  &scc_info_Dist_Uniform_distribution_2eproto.base,
  &scc_info_Time_Def_distribution_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_distribution_2eproto_once;
static bool descriptor_table_distribution_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_distribution_2eproto = {
  &descriptor_table_distribution_2eproto_initialized, descriptor_table_protodef_distribution_2eproto, "distribution.proto", 387,
  &descriptor_table_distribution_2eproto_once, descriptor_table_distribution_2eproto_sccs, descriptor_table_distribution_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_distribution_2eproto::offsets,
  file_level_metadata_distribution_2eproto, 7, file_level_enum_descriptors_distribution_2eproto, file_level_service_descriptors_distribution_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_distribution_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_distribution_2eproto), true);

// ===================================================================

void Time_Def::InitAsDefaultInstance() {
}
class Time_Def::_Internal {
 public:
};

Time_Def::Time_Def()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Time_Def)
}
Time_Def::Time_Def(const Time_Def& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&days_, &from.days_,
    static_cast<size_t>(reinterpret_cast<char*>(&minutes_) -
    reinterpret_cast<char*>(&days_)) + sizeof(minutes_));
  // @@protoc_insertion_point(copy_constructor:Time_Def)
}

void Time_Def::SharedCtor() {
  ::memset(&days_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minutes_) -
      reinterpret_cast<char*>(&days_)) + sizeof(minutes_));
}

Time_Def::~Time_Def() {
  // @@protoc_insertion_point(destructor:Time_Def)
  SharedDtor();
}

void Time_Def::SharedDtor() {
}

void Time_Def::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Time_Def& Time_Def::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Time_Def_distribution_2eproto.base);
  return *internal_default_instance();
}


void Time_Def::Clear() {
// @@protoc_insertion_point(message_clear_start:Time_Def)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&days_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minutes_) -
      reinterpret_cast<char*>(&days_)) + sizeof(minutes_));
  _internal_metadata_.Clear();
}

const char* Time_Def::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 days = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hours = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minutes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Time_Def::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Time_Def)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 days = 1;
  if (this->days() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_days(), target);
  }

  // int32 hours = 2;
  if (this->hours() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hours(), target);
  }

  // int32 minutes = 3;
  if (this->minutes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_minutes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Time_Def)
  return target;
}

size_t Time_Def::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Time_Def)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 days = 1;
  if (this->days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_days());
  }

  // int32 hours = 2;
  if (this->hours() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hours());
  }

  // int32 minutes = 3;
  if (this->minutes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minutes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Time_Def::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Time_Def)
  GOOGLE_DCHECK_NE(&from, this);
  const Time_Def* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Time_Def>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Time_Def)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Time_Def)
    MergeFrom(*source);
  }
}

void Time_Def::MergeFrom(const Time_Def& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Time_Def)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.days() != 0) {
    _internal_set_days(from._internal_days());
  }
  if (from.hours() != 0) {
    _internal_set_hours(from._internal_hours());
  }
  if (from.minutes() != 0) {
    _internal_set_minutes(from._internal_minutes());
  }
}

void Time_Def::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Time_Def)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time_Def::CopyFrom(const Time_Def& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Time_Def)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time_Def::IsInitialized() const {
  return true;
}

void Time_Def::InternalSwap(Time_Def* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(days_, other->days_);
  swap(hours_, other->hours_);
  swap(minutes_, other->minutes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Time_Def::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dist_Uniform::InitAsDefaultInstance() {
  ::_Dist_Uniform_default_instance_._instance.get_mutable()->tmin_ = const_cast< ::Time_Def*>(
      ::Time_Def::internal_default_instance());
  ::_Dist_Uniform_default_instance_._instance.get_mutable()->tmax_ = const_cast< ::Time_Def*>(
      ::Time_Def::internal_default_instance());
}
class Dist_Uniform::_Internal {
 public:
  static const ::Time_Def& tmin(const Dist_Uniform* msg);
  static const ::Time_Def& tmax(const Dist_Uniform* msg);
};

const ::Time_Def&
Dist_Uniform::_Internal::tmin(const Dist_Uniform* msg) {
  return *msg->tmin_;
}
const ::Time_Def&
Dist_Uniform::_Internal::tmax(const Dist_Uniform* msg) {
  return *msg->tmax_;
}
Dist_Uniform::Dist_Uniform()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Dist_Uniform)
}
Dist_Uniform::Dist_Uniform(const Dist_Uniform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_tmin()) {
    tmin_ = new ::Time_Def(*from.tmin_);
  } else {
    tmin_ = nullptr;
  }
  if (from._internal_has_tmax()) {
    tmax_ = new ::Time_Def(*from.tmax_);
  } else {
    tmax_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Dist_Uniform)
}

void Dist_Uniform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dist_Uniform_distribution_2eproto.base);
  ::memset(&tmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tmax_) -
      reinterpret_cast<char*>(&tmin_)) + sizeof(tmax_));
}

Dist_Uniform::~Dist_Uniform() {
  // @@protoc_insertion_point(destructor:Dist_Uniform)
  SharedDtor();
}

void Dist_Uniform::SharedDtor() {
  if (this != internal_default_instance()) delete tmin_;
  if (this != internal_default_instance()) delete tmax_;
}

void Dist_Uniform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dist_Uniform& Dist_Uniform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dist_Uniform_distribution_2eproto.base);
  return *internal_default_instance();
}


void Dist_Uniform::Clear() {
// @@protoc_insertion_point(message_clear_start:Dist_Uniform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && tmin_ != nullptr) {
    delete tmin_;
  }
  tmin_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tmax_ != nullptr) {
    delete tmax_;
  }
  tmax_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Dist_Uniform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Time_Def tmin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tmin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Time_Def tmax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tmax(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dist_Uniform::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Dist_Uniform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Time_Def tmin = 1;
  if (this->has_tmin()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::tmin(this), target, stream);
  }

  // .Time_Def tmax = 2;
  if (this->has_tmax()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::tmax(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Dist_Uniform)
  return target;
}

size_t Dist_Uniform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Dist_Uniform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Time_Def tmin = 1;
  if (this->has_tmin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tmin_);
  }

  // .Time_Def tmax = 2;
  if (this->has_tmax()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tmax_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dist_Uniform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Dist_Uniform)
  GOOGLE_DCHECK_NE(&from, this);
  const Dist_Uniform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dist_Uniform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Dist_Uniform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Dist_Uniform)
    MergeFrom(*source);
  }
}

void Dist_Uniform::MergeFrom(const Dist_Uniform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Dist_Uniform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tmin()) {
    _internal_mutable_tmin()->::Time_Def::MergeFrom(from._internal_tmin());
  }
  if (from.has_tmax()) {
    _internal_mutable_tmax()->::Time_Def::MergeFrom(from._internal_tmax());
  }
}

void Dist_Uniform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Dist_Uniform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dist_Uniform::CopyFrom(const Dist_Uniform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Dist_Uniform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dist_Uniform::IsInitialized() const {
  return true;
}

void Dist_Uniform::InternalSwap(Dist_Uniform* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tmin_, other->tmin_);
  swap(tmax_, other->tmax_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dist_Uniform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dist_Normal::InitAsDefaultInstance() {
  ::_Dist_Normal_default_instance_._instance.get_mutable()->tmean_ = const_cast< ::Time_Def*>(
      ::Time_Def::internal_default_instance());
  ::_Dist_Normal_default_instance_._instance.get_mutable()->tstdev_ = const_cast< ::Time_Def*>(
      ::Time_Def::internal_default_instance());
}
class Dist_Normal::_Internal {
 public:
  static const ::Time_Def& tmean(const Dist_Normal* msg);
  static const ::Time_Def& tstdev(const Dist_Normal* msg);
};

const ::Time_Def&
Dist_Normal::_Internal::tmean(const Dist_Normal* msg) {
  return *msg->tmean_;
}
const ::Time_Def&
Dist_Normal::_Internal::tstdev(const Dist_Normal* msg) {
  return *msg->tstdev_;
}
Dist_Normal::Dist_Normal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Dist_Normal)
}
Dist_Normal::Dist_Normal(const Dist_Normal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_tmean()) {
    tmean_ = new ::Time_Def(*from.tmean_);
  } else {
    tmean_ = nullptr;
  }
  if (from._internal_has_tstdev()) {
    tstdev_ = new ::Time_Def(*from.tstdev_);
  } else {
    tstdev_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Dist_Normal)
}

void Dist_Normal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dist_Normal_distribution_2eproto.base);
  ::memset(&tmean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tstdev_) -
      reinterpret_cast<char*>(&tmean_)) + sizeof(tstdev_));
}

Dist_Normal::~Dist_Normal() {
  // @@protoc_insertion_point(destructor:Dist_Normal)
  SharedDtor();
}

void Dist_Normal::SharedDtor() {
  if (this != internal_default_instance()) delete tmean_;
  if (this != internal_default_instance()) delete tstdev_;
}

void Dist_Normal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dist_Normal& Dist_Normal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dist_Normal_distribution_2eproto.base);
  return *internal_default_instance();
}


void Dist_Normal::Clear() {
// @@protoc_insertion_point(message_clear_start:Dist_Normal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && tmean_ != nullptr) {
    delete tmean_;
  }
  tmean_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tstdev_ != nullptr) {
    delete tstdev_;
  }
  tstdev_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Dist_Normal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Time_Def tmean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tmean(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Time_Def tstdev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tstdev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dist_Normal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Dist_Normal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Time_Def tmean = 1;
  if (this->has_tmean()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::tmean(this), target, stream);
  }

  // .Time_Def tstdev = 2;
  if (this->has_tstdev()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::tstdev(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Dist_Normal)
  return target;
}

size_t Dist_Normal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Dist_Normal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Time_Def tmean = 1;
  if (this->has_tmean()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tmean_);
  }

  // .Time_Def tstdev = 2;
  if (this->has_tstdev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tstdev_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dist_Normal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Dist_Normal)
  GOOGLE_DCHECK_NE(&from, this);
  const Dist_Normal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dist_Normal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Dist_Normal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Dist_Normal)
    MergeFrom(*source);
  }
}

void Dist_Normal::MergeFrom(const Dist_Normal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Dist_Normal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tmean()) {
    _internal_mutable_tmean()->::Time_Def::MergeFrom(from._internal_tmean());
  }
  if (from.has_tstdev()) {
    _internal_mutable_tstdev()->::Time_Def::MergeFrom(from._internal_tstdev());
  }
}

void Dist_Normal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Dist_Normal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dist_Normal::CopyFrom(const Dist_Normal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Dist_Normal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dist_Normal::IsInitialized() const {
  return true;
}

void Dist_Normal::InternalSwap(Dist_Normal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tmean_, other->tmean_);
  swap(tstdev_, other->tstdev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dist_Normal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dist_Forever::InitAsDefaultInstance() {
}
class Dist_Forever::_Internal {
 public:
};

Dist_Forever::Dist_Forever()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Dist_Forever)
}
Dist_Forever::Dist_Forever(const Dist_Forever& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Dist_Forever)
}

void Dist_Forever::SharedCtor() {
}

Dist_Forever::~Dist_Forever() {
  // @@protoc_insertion_point(destructor:Dist_Forever)
  SharedDtor();
}

void Dist_Forever::SharedDtor() {
}

void Dist_Forever::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dist_Forever& Dist_Forever::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dist_Forever_distribution_2eproto.base);
  return *internal_default_instance();
}


void Dist_Forever::Clear() {
// @@protoc_insertion_point(message_clear_start:Dist_Forever)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* Dist_Forever::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dist_Forever::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Dist_Forever)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Dist_Forever)
  return target;
}

size_t Dist_Forever::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Dist_Forever)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dist_Forever::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Dist_Forever)
  GOOGLE_DCHECK_NE(&from, this);
  const Dist_Forever* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dist_Forever>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Dist_Forever)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Dist_Forever)
    MergeFrom(*source);
  }
}

void Dist_Forever::MergeFrom(const Dist_Forever& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Dist_Forever)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Dist_Forever::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Dist_Forever)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dist_Forever::CopyFrom(const Dist_Forever& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Dist_Forever)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dist_Forever::IsInitialized() const {
  return true;
}

void Dist_Forever::InternalSwap(Dist_Forever* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dist_Forever::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dist_Histogram_Bin::InitAsDefaultInstance() {
  ::_Dist_Histogram_Bin_default_instance_._instance.get_mutable()->tval_ = const_cast< ::Time_Def*>(
      ::Time_Def::internal_default_instance());
}
class Dist_Histogram_Bin::_Internal {
 public:
  static const ::Time_Def& tval(const Dist_Histogram_Bin* msg);
};

const ::Time_Def&
Dist_Histogram_Bin::_Internal::tval(const Dist_Histogram_Bin* msg) {
  return *msg->tval_;
}
Dist_Histogram_Bin::Dist_Histogram_Bin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Dist_Histogram.Bin)
}
Dist_Histogram_Bin::Dist_Histogram_Bin(const Dist_Histogram_Bin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_tval()) {
    tval_ = new ::Time_Def(*from.tval_);
  } else {
    tval_ = nullptr;
  }
  with_prob_ = from.with_prob_;
  // @@protoc_insertion_point(copy_constructor:Dist_Histogram.Bin)
}

void Dist_Histogram_Bin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dist_Histogram_Bin_distribution_2eproto.base);
  ::memset(&tval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&with_prob_) -
      reinterpret_cast<char*>(&tval_)) + sizeof(with_prob_));
}

Dist_Histogram_Bin::~Dist_Histogram_Bin() {
  // @@protoc_insertion_point(destructor:Dist_Histogram.Bin)
  SharedDtor();
}

void Dist_Histogram_Bin::SharedDtor() {
  if (this != internal_default_instance()) delete tval_;
}

void Dist_Histogram_Bin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dist_Histogram_Bin& Dist_Histogram_Bin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dist_Histogram_Bin_distribution_2eproto.base);
  return *internal_default_instance();
}


void Dist_Histogram_Bin::Clear() {
// @@protoc_insertion_point(message_clear_start:Dist_Histogram.Bin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && tval_ != nullptr) {
    delete tval_;
  }
  tval_ = nullptr;
  with_prob_ = 0;
  _internal_metadata_.Clear();
}

const char* Dist_Histogram_Bin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Time_Def tval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double with_prob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          with_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dist_Histogram_Bin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Dist_Histogram.Bin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Time_Def tval = 1;
  if (this->has_tval()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::tval(this), target, stream);
  }

  // double with_prob = 2;
  if (!(this->with_prob() <= 0 && this->with_prob() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_with_prob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Dist_Histogram.Bin)
  return target;
}

size_t Dist_Histogram_Bin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Dist_Histogram.Bin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Time_Def tval = 1;
  if (this->has_tval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tval_);
  }

  // double with_prob = 2;
  if (!(this->with_prob() <= 0 && this->with_prob() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dist_Histogram_Bin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Dist_Histogram.Bin)
  GOOGLE_DCHECK_NE(&from, this);
  const Dist_Histogram_Bin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dist_Histogram_Bin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Dist_Histogram.Bin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Dist_Histogram.Bin)
    MergeFrom(*source);
  }
}

void Dist_Histogram_Bin::MergeFrom(const Dist_Histogram_Bin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Dist_Histogram.Bin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tval()) {
    _internal_mutable_tval()->::Time_Def::MergeFrom(from._internal_tval());
  }
  if (!(from.with_prob() <= 0 && from.with_prob() >= 0)) {
    _internal_set_with_prob(from._internal_with_prob());
  }
}

void Dist_Histogram_Bin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Dist_Histogram.Bin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dist_Histogram_Bin::CopyFrom(const Dist_Histogram_Bin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Dist_Histogram.Bin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dist_Histogram_Bin::IsInitialized() const {
  return true;
}

void Dist_Histogram_Bin::InternalSwap(Dist_Histogram_Bin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tval_, other->tval_);
  swap(with_prob_, other->with_prob_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dist_Histogram_Bin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dist_Histogram::InitAsDefaultInstance() {
}
class Dist_Histogram::_Internal {
 public:
};

Dist_Histogram::Dist_Histogram()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Dist_Histogram)
}
Dist_Histogram::Dist_Histogram(const Dist_Histogram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bin_(from.bin_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Dist_Histogram)
}

void Dist_Histogram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dist_Histogram_distribution_2eproto.base);
}

Dist_Histogram::~Dist_Histogram() {
  // @@protoc_insertion_point(destructor:Dist_Histogram)
  SharedDtor();
}

void Dist_Histogram::SharedDtor() {
}

void Dist_Histogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dist_Histogram& Dist_Histogram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dist_Histogram_distribution_2eproto.base);
  return *internal_default_instance();
}


void Dist_Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:Dist_Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bin_.Clear();
  _internal_metadata_.Clear();
}

const char* Dist_Histogram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Dist_Histogram.Bin bin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bin(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dist_Histogram::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Dist_Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Dist_Histogram.Bin bin = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bin_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_bin(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Dist_Histogram)
  return target;
}

size_t Dist_Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Dist_Histogram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Dist_Histogram.Bin bin = 1;
  total_size += 1UL * this->_internal_bin_size();
  for (const auto& msg : this->bin_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dist_Histogram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Dist_Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  const Dist_Histogram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dist_Histogram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Dist_Histogram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Dist_Histogram)
    MergeFrom(*source);
  }
}

void Dist_Histogram::MergeFrom(const Dist_Histogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Dist_Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bin_.MergeFrom(from.bin_);
}

void Dist_Histogram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Dist_Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dist_Histogram::CopyFrom(const Dist_Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Dist_Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dist_Histogram::IsInitialized() const {
  return true;
}

void Dist_Histogram::InternalSwap(Dist_Histogram* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bin_.InternalSwap(&other->bin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dist_Histogram::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dist_Fixed::InitAsDefaultInstance() {
  ::_Dist_Fixed_default_instance_._instance.get_mutable()->time_in_state_ = const_cast< ::Time_Def*>(
      ::Time_Def::internal_default_instance());
}
class Dist_Fixed::_Internal {
 public:
  static const ::Time_Def& time_in_state(const Dist_Fixed* msg);
};

const ::Time_Def&
Dist_Fixed::_Internal::time_in_state(const Dist_Fixed* msg) {
  return *msg->time_in_state_;
}
Dist_Fixed::Dist_Fixed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Dist_Fixed)
}
Dist_Fixed::Dist_Fixed(const Dist_Fixed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_time_in_state()) {
    time_in_state_ = new ::Time_Def(*from.time_in_state_);
  } else {
    time_in_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Dist_Fixed)
}

void Dist_Fixed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dist_Fixed_distribution_2eproto.base);
  time_in_state_ = nullptr;
}

Dist_Fixed::~Dist_Fixed() {
  // @@protoc_insertion_point(destructor:Dist_Fixed)
  SharedDtor();
}

void Dist_Fixed::SharedDtor() {
  if (this != internal_default_instance()) delete time_in_state_;
}

void Dist_Fixed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dist_Fixed& Dist_Fixed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dist_Fixed_distribution_2eproto.base);
  return *internal_default_instance();
}


void Dist_Fixed::Clear() {
// @@protoc_insertion_point(message_clear_start:Dist_Fixed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && time_in_state_ != nullptr) {
    delete time_in_state_;
  }
  time_in_state_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Dist_Fixed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Time_Def time_in_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_in_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dist_Fixed::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Dist_Fixed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Time_Def time_in_state = 1;
  if (this->has_time_in_state()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::time_in_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Dist_Fixed)
  return target;
}

size_t Dist_Fixed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Dist_Fixed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Time_Def time_in_state = 1;
  if (this->has_time_in_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_in_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dist_Fixed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Dist_Fixed)
  GOOGLE_DCHECK_NE(&from, this);
  const Dist_Fixed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dist_Fixed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Dist_Fixed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Dist_Fixed)
    MergeFrom(*source);
  }
}

void Dist_Fixed::MergeFrom(const Dist_Fixed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Dist_Fixed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_in_state()) {
    _internal_mutable_time_in_state()->::Time_Def::MergeFrom(from._internal_time_in_state());
  }
}

void Dist_Fixed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Dist_Fixed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dist_Fixed::CopyFrom(const Dist_Fixed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Dist_Fixed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dist_Fixed::IsInitialized() const {
  return true;
}

void Dist_Fixed::InternalSwap(Dist_Fixed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_in_state_, other->time_in_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dist_Fixed::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Time_Def* Arena::CreateMaybeMessage< ::Time_Def >(Arena* arena) {
  return Arena::CreateInternal< ::Time_Def >(arena);
}
template<> PROTOBUF_NOINLINE ::Dist_Uniform* Arena::CreateMaybeMessage< ::Dist_Uniform >(Arena* arena) {
  return Arena::CreateInternal< ::Dist_Uniform >(arena);
}
template<> PROTOBUF_NOINLINE ::Dist_Normal* Arena::CreateMaybeMessage< ::Dist_Normal >(Arena* arena) {
  return Arena::CreateInternal< ::Dist_Normal >(arena);
}
template<> PROTOBUF_NOINLINE ::Dist_Forever* Arena::CreateMaybeMessage< ::Dist_Forever >(Arena* arena) {
  return Arena::CreateInternal< ::Dist_Forever >(arena);
}
template<> PROTOBUF_NOINLINE ::Dist_Histogram_Bin* Arena::CreateMaybeMessage< ::Dist_Histogram_Bin >(Arena* arena) {
  return Arena::CreateInternal< ::Dist_Histogram_Bin >(arena);
}
template<> PROTOBUF_NOINLINE ::Dist_Histogram* Arena::CreateMaybeMessage< ::Dist_Histogram >(Arena* arena) {
  return Arena::CreateInternal< ::Dist_Histogram >(arena);
}
template<> PROTOBUF_NOINLINE ::Dist_Fixed* Arena::CreateMaybeMessage< ::Dist_Fixed >(Arena* arena) {
  return Arena::CreateInternal< ::Dist_Fixed >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
