// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: disease.proto

#include "disease.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_distribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dist_Fixed_distribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_distribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dist_Forever_distribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_distribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dist_Histogram_distribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_distribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dist_Normal_distribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_distribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dist_Uniform_distribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_disease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_DiseaseModel_DiseaseState_disease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_disease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiseaseModel_DiseaseState_StateTransitionSet_disease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_disease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiseaseModel_DiseaseState_StateTransitionSet_StateTransition_disease_2eproto;
namespace loimos {
namespace proto {
class DiseaseModel_DiseaseState_StateTransitionSet_StateTransitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiseaseModel_DiseaseState_StateTransitionSet_StateTransition> _instance;
} _DiseaseModel_DiseaseState_StateTransitionSet_StateTransition_default_instance_;
class DiseaseModel_DiseaseState_StateTransitionSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiseaseModel_DiseaseState_StateTransitionSet> _instance;
} _DiseaseModel_DiseaseState_StateTransitionSet_default_instance_;
class DiseaseModel_DiseaseStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiseaseModel_DiseaseState> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 prodrome_;
  ::PROTOBUF_NAMESPACE_ID::int32 vulnerability_;
  ::PROTOBUF_NAMESPACE_ID::int32 symptomatic_;
  ::PROTOBUF_NAMESPACE_ID::int32 tracing_;
  const ::Dist_Uniform* uniform_;
  const ::Dist_Normal* normal_;
  const ::Dist_Fixed* fixed_;
  const ::Dist_Forever* forever_;
  const ::Dist_Histogram* histogram_;
} _DiseaseModel_DiseaseState_default_instance_;
class DiseaseModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiseaseModel> _instance;
} _DiseaseModel_default_instance_;
}  // namespace proto
}  // namespace loimos
static void InitDefaultsscc_info_DiseaseModel_disease_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::loimos::proto::_DiseaseModel_default_instance_;
    new (ptr) ::loimos::proto::DiseaseModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::loimos::proto::DiseaseModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiseaseModel_disease_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DiseaseModel_disease_2eproto}, {
      &scc_info_DiseaseModel_DiseaseState_disease_2eproto.base,}};

static void InitDefaultsscc_info_DiseaseModel_DiseaseState_disease_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::loimos::proto::_DiseaseModel_DiseaseState_default_instance_;
    new (ptr) ::loimos::proto::DiseaseModel_DiseaseState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::loimos::proto::DiseaseModel_DiseaseState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_DiseaseModel_DiseaseState_disease_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_DiseaseModel_DiseaseState_disease_2eproto}, {
      &scc_info_Dist_Uniform_distribution_2eproto.base,
      &scc_info_Dist_Normal_distribution_2eproto.base,
      &scc_info_Dist_Fixed_distribution_2eproto.base,
      &scc_info_Dist_Forever_distribution_2eproto.base,
      &scc_info_Dist_Histogram_distribution_2eproto.base,
      &scc_info_DiseaseModel_DiseaseState_StateTransitionSet_disease_2eproto.base,}};

static void InitDefaultsscc_info_DiseaseModel_DiseaseState_StateTransitionSet_disease_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::loimos::proto::_DiseaseModel_DiseaseState_StateTransitionSet_default_instance_;
    new (ptr) ::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiseaseModel_DiseaseState_StateTransitionSet_disease_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DiseaseModel_DiseaseState_StateTransitionSet_disease_2eproto}, {
      &scc_info_DiseaseModel_DiseaseState_StateTransitionSet_StateTransition_disease_2eproto.base,}};

static void InitDefaultsscc_info_DiseaseModel_DiseaseState_StateTransitionSet_StateTransition_disease_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::loimos::proto::_DiseaseModel_DiseaseState_StateTransitionSet_StateTransition_default_instance_;
    new (ptr) ::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet_StateTransition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiseaseModel_DiseaseState_StateTransitionSet_StateTransition_disease_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DiseaseModel_DiseaseState_StateTransitionSet_StateTransition_disease_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_disease_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_disease_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_disease_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_disease_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet_StateTransition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet_StateTransition, next_state_),
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet_StateTransition, with_prob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet, transition_label_),
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet, transition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState, state_label_),
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState, infectivity_),
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState, susceptibility_),
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState, incapacitation_),
  offsetof(::loimos::proto::DiseaseModel_DiseaseStateDefaultTypeInternal, prodrome_),
  offsetof(::loimos::proto::DiseaseModel_DiseaseStateDefaultTypeInternal, vulnerability_),
  offsetof(::loimos::proto::DiseaseModel_DiseaseStateDefaultTypeInternal, symptomatic_),
  offsetof(::loimos::proto::DiseaseModel_DiseaseStateDefaultTypeInternal, tracing_),
  offsetof(::loimos::proto::DiseaseModel_DiseaseStateDefaultTypeInternal, uniform_),
  offsetof(::loimos::proto::DiseaseModel_DiseaseStateDefaultTypeInternal, normal_),
  offsetof(::loimos::proto::DiseaseModel_DiseaseStateDefaultTypeInternal, fixed_),
  offsetof(::loimos::proto::DiseaseModel_DiseaseStateDefaultTypeInternal, forever_),
  offsetof(::loimos::proto::DiseaseModel_DiseaseStateDefaultTypeInternal, histogram_),
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState, transition_set_),
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState, prodrome_or_vulnerability_),
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState, symptomatic_or_tracing_),
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel_DiseaseState, dwell_time_distribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel, label_),
  PROTOBUF_FIELD_OFFSET(::loimos::proto::DiseaseModel, disease_state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet_StateTransition)},
  { 7, -1, sizeof(::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet)},
  { 14, -1, sizeof(::loimos::proto::DiseaseModel_DiseaseState)},
  { 36, -1, sizeof(::loimos::proto::DiseaseModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::loimos::proto::_DiseaseModel_DiseaseState_StateTransitionSet_StateTransition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::loimos::proto::_DiseaseModel_DiseaseState_StateTransitionSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::loimos::proto::_DiseaseModel_DiseaseState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::loimos::proto::_DiseaseModel_default_instance_),
};

const char descriptor_table_protodef_disease_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rdisease.proto\022\014loimos.proto\032\022distribut"
  "ion.proto\"\270\006\n\014DiseaseModel\022\r\n\005label\030\001 \001("
  "\t\022>\n\rdisease_state\030\002 \003(\0132\'.loimos.proto."
  "DiseaseModel.DiseaseState\032\330\005\n\014DiseaseSta"
  "te\022\023\n\013state_label\030\001 \001(\t\022\023\n\013infectivity\030\002"
  " \001(\001\022\026\n\016susceptibility\030\003 \001(\001\022\026\n\016incapaci"
  "tation\030\004 \001(\001\022\022\n\010prodrome\030\005 \001(\005H\000\022\027\n\rvuln"
  "erability\030\006 \001(\005H\000\022\025\n\013symptomatic\030\007 \001(\005H\001"
  "\022\021\n\007tracing\030\010 \001(\005H\001\022 \n\007uniform\030\t \001(\0132\r.D"
  "ist_UniformH\002\022\036\n\006normal\030\n \001(\0132\014.Dist_Nor"
  "malH\002\022\034\n\005fixed\030\013 \001(\0132\013.Dist_FixedH\002\022 \n\007f"
  "orever\030\014 \001(\0132\r.Dist_ForeverH\002\022$\n\thistogr"
  "am\030\r \001(\0132\017.Dist_HistogramH\002\022R\n\016transitio"
  "n_set\030\016 \003(\0132:.loimos.proto.DiseaseModel."
  "DiseaseState.StateTransitionSet\032\310\001\n\022Stat"
  "eTransitionSet\022\030\n\020transition_label\030\001 \001(\t"
  "\022^\n\ntransition\030\006 \003(\0132J.loimos.proto.Dise"
  "aseModel.DiseaseState.StateTransitionSet"
  ".StateTransition\0328\n\017StateTransition\022\022\n\nn"
  "ext_state\030\002 \001(\t\022\021\n\twith_prob\030\003 \001(\001B\033\n\031pr"
  "odrome_or_vulnerabilityB\030\n\026symptomatic_o"
  "r_tracingB\031\n\027dwell_time_distributionb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_disease_2eproto_deps[1] = {
  &::descriptor_table_distribution_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_disease_2eproto_sccs[4] = {
  &scc_info_DiseaseModel_disease_2eproto.base,
  &scc_info_DiseaseModel_DiseaseState_disease_2eproto.base,
  &scc_info_DiseaseModel_DiseaseState_StateTransitionSet_disease_2eproto.base,
  &scc_info_DiseaseModel_DiseaseState_StateTransitionSet_StateTransition_disease_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_disease_2eproto_once;
static bool descriptor_table_disease_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_disease_2eproto = {
  &descriptor_table_disease_2eproto_initialized, descriptor_table_protodef_disease_2eproto, "disease.proto", 884,
  &descriptor_table_disease_2eproto_once, descriptor_table_disease_2eproto_sccs, descriptor_table_disease_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_disease_2eproto::offsets,
  file_level_metadata_disease_2eproto, 4, file_level_enum_descriptors_disease_2eproto, file_level_service_descriptors_disease_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_disease_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_disease_2eproto), true);
namespace loimos {
namespace proto {

// ===================================================================

void DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::InitAsDefaultInstance() {
}
class DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::_Internal {
 public:
};

DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::DiseaseModel_DiseaseState_StateTransitionSet_StateTransition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
}
DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::DiseaseModel_DiseaseState_StateTransitionSet_StateTransition(const DiseaseModel_DiseaseState_StateTransitionSet_StateTransition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_state().empty()) {
    next_state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_state_);
  }
  with_prob_ = from.with_prob_;
  // @@protoc_insertion_point(copy_constructor:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
}

void DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiseaseModel_DiseaseState_StateTransitionSet_StateTransition_disease_2eproto.base);
  next_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  with_prob_ = 0;
}

DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::~DiseaseModel_DiseaseState_StateTransitionSet_StateTransition() {
  // @@protoc_insertion_point(destructor:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
  SharedDtor();
}

void DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::SharedDtor() {
  next_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiseaseModel_DiseaseState_StateTransitionSet_StateTransition& DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiseaseModel_DiseaseState_StateTransitionSet_StateTransition_disease_2eproto.base);
  return *internal_default_instance();
}


void DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::Clear() {
// @@protoc_insertion_point(message_clear_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  with_prob_ = 0;
  _internal_metadata_.Clear();
}

const char* DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string next_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_next_state(), ptr, ctx, "loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition.next_state");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double with_prob = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          with_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string next_state = 2;
  if (this->next_state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_state().data(), static_cast<int>(this->_internal_next_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition.next_state");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_state(), target);
  }

  // double with_prob = 3;
  if (!(this->with_prob() <= 0 && this->with_prob() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_with_prob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
  return target;
}

size_t DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string next_state = 2;
  if (this->next_state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_state());
  }

  // double with_prob = 3;
  if (!(this->with_prob() <= 0 && this->with_prob() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
  GOOGLE_DCHECK_NE(&from, this);
  const DiseaseModel_DiseaseState_StateTransitionSet_StateTransition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiseaseModel_DiseaseState_StateTransitionSet_StateTransition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
    MergeFrom(*source);
  }
}

void DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::MergeFrom(const DiseaseModel_DiseaseState_StateTransitionSet_StateTransition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.next_state().size() > 0) {

    next_state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_state_);
  }
  if (!(from.with_prob() <= 0 && from.with_prob() >= 0)) {
    _internal_set_with_prob(from._internal_with_prob());
  }
}

void DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::CopyFrom(const DiseaseModel_DiseaseState_StateTransitionSet_StateTransition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::IsInitialized() const {
  return true;
}

void DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::InternalSwap(DiseaseModel_DiseaseState_StateTransitionSet_StateTransition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  next_state_.Swap(&other->next_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(with_prob_, other->with_prob_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiseaseModel_DiseaseState_StateTransitionSet_StateTransition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiseaseModel_DiseaseState_StateTransitionSet::InitAsDefaultInstance() {
}
class DiseaseModel_DiseaseState_StateTransitionSet::_Internal {
 public:
};

DiseaseModel_DiseaseState_StateTransitionSet::DiseaseModel_DiseaseState_StateTransitionSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
}
DiseaseModel_DiseaseState_StateTransitionSet::DiseaseModel_DiseaseState_StateTransitionSet(const DiseaseModel_DiseaseState_StateTransitionSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transition_(from.transition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transition_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transition_label().empty()) {
    transition_label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transition_label_);
  }
  // @@protoc_insertion_point(copy_constructor:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
}

void DiseaseModel_DiseaseState_StateTransitionSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiseaseModel_DiseaseState_StateTransitionSet_disease_2eproto.base);
  transition_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiseaseModel_DiseaseState_StateTransitionSet::~DiseaseModel_DiseaseState_StateTransitionSet() {
  // @@protoc_insertion_point(destructor:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
  SharedDtor();
}

void DiseaseModel_DiseaseState_StateTransitionSet::SharedDtor() {
  transition_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiseaseModel_DiseaseState_StateTransitionSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiseaseModel_DiseaseState_StateTransitionSet& DiseaseModel_DiseaseState_StateTransitionSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiseaseModel_DiseaseState_StateTransitionSet_disease_2eproto.base);
  return *internal_default_instance();
}


void DiseaseModel_DiseaseState_StateTransitionSet::Clear() {
// @@protoc_insertion_point(message_clear_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transition_.Clear();
  transition_label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DiseaseModel_DiseaseState_StateTransitionSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transition_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_transition_label(), ptr, ctx, "loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.transition_label");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition transition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiseaseModel_DiseaseState_StateTransitionSet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transition_label = 1;
  if (this->transition_label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transition_label().data(), static_cast<int>(this->_internal_transition_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.transition_label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transition_label(), target);
  }

  // repeated .loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition transition = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transition_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_transition(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
  return target;
}

size_t DiseaseModel_DiseaseState_StateTransitionSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet.StateTransition transition = 6;
  total_size += 1UL * this->_internal_transition_size();
  for (const auto& msg : this->transition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string transition_label = 1;
  if (this->transition_label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transition_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiseaseModel_DiseaseState_StateTransitionSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
  GOOGLE_DCHECK_NE(&from, this);
  const DiseaseModel_DiseaseState_StateTransitionSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiseaseModel_DiseaseState_StateTransitionSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
    MergeFrom(*source);
  }
}

void DiseaseModel_DiseaseState_StateTransitionSet::MergeFrom(const DiseaseModel_DiseaseState_StateTransitionSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transition_.MergeFrom(from.transition_);
  if (from.transition_label().size() > 0) {

    transition_label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transition_label_);
  }
}

void DiseaseModel_DiseaseState_StateTransitionSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiseaseModel_DiseaseState_StateTransitionSet::CopyFrom(const DiseaseModel_DiseaseState_StateTransitionSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiseaseModel_DiseaseState_StateTransitionSet::IsInitialized() const {
  return true;
}

void DiseaseModel_DiseaseState_StateTransitionSet::InternalSwap(DiseaseModel_DiseaseState_StateTransitionSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transition_.InternalSwap(&other->transition_);
  transition_label_.Swap(&other->transition_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiseaseModel_DiseaseState_StateTransitionSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiseaseModel_DiseaseState::InitAsDefaultInstance() {
  ::loimos::proto::_DiseaseModel_DiseaseState_default_instance_.prodrome_ = 0;
  ::loimos::proto::_DiseaseModel_DiseaseState_default_instance_.vulnerability_ = 0;
  ::loimos::proto::_DiseaseModel_DiseaseState_default_instance_.symptomatic_ = 0;
  ::loimos::proto::_DiseaseModel_DiseaseState_default_instance_.tracing_ = 0;
  ::loimos::proto::_DiseaseModel_DiseaseState_default_instance_.uniform_ = const_cast< ::Dist_Uniform*>(
      ::Dist_Uniform::internal_default_instance());
  ::loimos::proto::_DiseaseModel_DiseaseState_default_instance_.normal_ = const_cast< ::Dist_Normal*>(
      ::Dist_Normal::internal_default_instance());
  ::loimos::proto::_DiseaseModel_DiseaseState_default_instance_.fixed_ = const_cast< ::Dist_Fixed*>(
      ::Dist_Fixed::internal_default_instance());
  ::loimos::proto::_DiseaseModel_DiseaseState_default_instance_.forever_ = const_cast< ::Dist_Forever*>(
      ::Dist_Forever::internal_default_instance());
  ::loimos::proto::_DiseaseModel_DiseaseState_default_instance_.histogram_ = const_cast< ::Dist_Histogram*>(
      ::Dist_Histogram::internal_default_instance());
}
class DiseaseModel_DiseaseState::_Internal {
 public:
  static const ::Dist_Uniform& uniform(const DiseaseModel_DiseaseState* msg);
  static const ::Dist_Normal& normal(const DiseaseModel_DiseaseState* msg);
  static const ::Dist_Fixed& fixed(const DiseaseModel_DiseaseState* msg);
  static const ::Dist_Forever& forever(const DiseaseModel_DiseaseState* msg);
  static const ::Dist_Histogram& histogram(const DiseaseModel_DiseaseState* msg);
};

const ::Dist_Uniform&
DiseaseModel_DiseaseState::_Internal::uniform(const DiseaseModel_DiseaseState* msg) {
  return *msg->dwell_time_distribution_.uniform_;
}
const ::Dist_Normal&
DiseaseModel_DiseaseState::_Internal::normal(const DiseaseModel_DiseaseState* msg) {
  return *msg->dwell_time_distribution_.normal_;
}
const ::Dist_Fixed&
DiseaseModel_DiseaseState::_Internal::fixed(const DiseaseModel_DiseaseState* msg) {
  return *msg->dwell_time_distribution_.fixed_;
}
const ::Dist_Forever&
DiseaseModel_DiseaseState::_Internal::forever(const DiseaseModel_DiseaseState* msg) {
  return *msg->dwell_time_distribution_.forever_;
}
const ::Dist_Histogram&
DiseaseModel_DiseaseState::_Internal::histogram(const DiseaseModel_DiseaseState* msg) {
  return *msg->dwell_time_distribution_.histogram_;
}
void DiseaseModel_DiseaseState::set_allocated_uniform(::Dist_Uniform* uniform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dwell_time_distribution();
  if (uniform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uniform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform, submessage_arena);
    }
    set_has_uniform();
    dwell_time_distribution_.uniform_ = uniform;
  }
  // @@protoc_insertion_point(field_set_allocated:loimos.proto.DiseaseModel.DiseaseState.uniform)
}
void DiseaseModel_DiseaseState::clear_uniform() {
  if (_internal_has_uniform()) {
    delete dwell_time_distribution_.uniform_;
    clear_has_dwell_time_distribution();
  }
}
void DiseaseModel_DiseaseState::set_allocated_normal(::Dist_Normal* normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dwell_time_distribution();
  if (normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    set_has_normal();
    dwell_time_distribution_.normal_ = normal;
  }
  // @@protoc_insertion_point(field_set_allocated:loimos.proto.DiseaseModel.DiseaseState.normal)
}
void DiseaseModel_DiseaseState::clear_normal() {
  if (_internal_has_normal()) {
    delete dwell_time_distribution_.normal_;
    clear_has_dwell_time_distribution();
  }
}
void DiseaseModel_DiseaseState::set_allocated_fixed(::Dist_Fixed* fixed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dwell_time_distribution();
  if (fixed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fixed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed, submessage_arena);
    }
    set_has_fixed();
    dwell_time_distribution_.fixed_ = fixed;
  }
  // @@protoc_insertion_point(field_set_allocated:loimos.proto.DiseaseModel.DiseaseState.fixed)
}
void DiseaseModel_DiseaseState::clear_fixed() {
  if (_internal_has_fixed()) {
    delete dwell_time_distribution_.fixed_;
    clear_has_dwell_time_distribution();
  }
}
void DiseaseModel_DiseaseState::set_allocated_forever(::Dist_Forever* forever) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dwell_time_distribution();
  if (forever) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      forever = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forever, submessage_arena);
    }
    set_has_forever();
    dwell_time_distribution_.forever_ = forever;
  }
  // @@protoc_insertion_point(field_set_allocated:loimos.proto.DiseaseModel.DiseaseState.forever)
}
void DiseaseModel_DiseaseState::clear_forever() {
  if (_internal_has_forever()) {
    delete dwell_time_distribution_.forever_;
    clear_has_dwell_time_distribution();
  }
}
void DiseaseModel_DiseaseState::set_allocated_histogram(::Dist_Histogram* histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dwell_time_distribution();
  if (histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      histogram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histogram, submessage_arena);
    }
    set_has_histogram();
    dwell_time_distribution_.histogram_ = histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:loimos.proto.DiseaseModel.DiseaseState.histogram)
}
void DiseaseModel_DiseaseState::clear_histogram() {
  if (_internal_has_histogram()) {
    delete dwell_time_distribution_.histogram_;
    clear_has_dwell_time_distribution();
  }
}
DiseaseModel_DiseaseState::DiseaseModel_DiseaseState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loimos.proto.DiseaseModel.DiseaseState)
}
DiseaseModel_DiseaseState::DiseaseModel_DiseaseState(const DiseaseModel_DiseaseState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transition_set_(from.transition_set_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_label().empty()) {
    state_label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_label_);
  }
  ::memcpy(&infectivity_, &from.infectivity_,
    static_cast<size_t>(reinterpret_cast<char*>(&incapacitation_) -
    reinterpret_cast<char*>(&infectivity_)) + sizeof(incapacitation_));
  clear_has_prodrome_or_vulnerability();
  switch (from.prodrome_or_vulnerability_case()) {
    case kProdrome: {
      _internal_set_prodrome(from._internal_prodrome());
      break;
    }
    case kVulnerability: {
      _internal_set_vulnerability(from._internal_vulnerability());
      break;
    }
    case PRODROME_OR_VULNERABILITY_NOT_SET: {
      break;
    }
  }
  clear_has_symptomatic_or_tracing();
  switch (from.symptomatic_or_tracing_case()) {
    case kSymptomatic: {
      _internal_set_symptomatic(from._internal_symptomatic());
      break;
    }
    case kTracing: {
      _internal_set_tracing(from._internal_tracing());
      break;
    }
    case SYMPTOMATIC_OR_TRACING_NOT_SET: {
      break;
    }
  }
  clear_has_dwell_time_distribution();
  switch (from.dwell_time_distribution_case()) {
    case kUniform: {
      _internal_mutable_uniform()->::Dist_Uniform::MergeFrom(from._internal_uniform());
      break;
    }
    case kNormal: {
      _internal_mutable_normal()->::Dist_Normal::MergeFrom(from._internal_normal());
      break;
    }
    case kFixed: {
      _internal_mutable_fixed()->::Dist_Fixed::MergeFrom(from._internal_fixed());
      break;
    }
    case kForever: {
      _internal_mutable_forever()->::Dist_Forever::MergeFrom(from._internal_forever());
      break;
    }
    case kHistogram: {
      _internal_mutable_histogram()->::Dist_Histogram::MergeFrom(from._internal_histogram());
      break;
    }
    case DWELL_TIME_DISTRIBUTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:loimos.proto.DiseaseModel.DiseaseState)
}

void DiseaseModel_DiseaseState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiseaseModel_DiseaseState_disease_2eproto.base);
  state_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&infectivity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incapacitation_) -
      reinterpret_cast<char*>(&infectivity_)) + sizeof(incapacitation_));
  clear_has_prodrome_or_vulnerability();
  clear_has_symptomatic_or_tracing();
  clear_has_dwell_time_distribution();
}

DiseaseModel_DiseaseState::~DiseaseModel_DiseaseState() {
  // @@protoc_insertion_point(destructor:loimos.proto.DiseaseModel.DiseaseState)
  SharedDtor();
}

void DiseaseModel_DiseaseState::SharedDtor() {
  state_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_prodrome_or_vulnerability()) {
    clear_prodrome_or_vulnerability();
  }
  if (has_symptomatic_or_tracing()) {
    clear_symptomatic_or_tracing();
  }
  if (has_dwell_time_distribution()) {
    clear_dwell_time_distribution();
  }
}

void DiseaseModel_DiseaseState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiseaseModel_DiseaseState& DiseaseModel_DiseaseState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiseaseModel_DiseaseState_disease_2eproto.base);
  return *internal_default_instance();
}


void DiseaseModel_DiseaseState::clear_prodrome_or_vulnerability() {
// @@protoc_insertion_point(one_of_clear_start:loimos.proto.DiseaseModel.DiseaseState)
  switch (prodrome_or_vulnerability_case()) {
    case kProdrome: {
      // No need to clear
      break;
    }
    case kVulnerability: {
      // No need to clear
      break;
    }
    case PRODROME_OR_VULNERABILITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PRODROME_OR_VULNERABILITY_NOT_SET;
}

void DiseaseModel_DiseaseState::clear_symptomatic_or_tracing() {
// @@protoc_insertion_point(one_of_clear_start:loimos.proto.DiseaseModel.DiseaseState)
  switch (symptomatic_or_tracing_case()) {
    case kSymptomatic: {
      // No need to clear
      break;
    }
    case kTracing: {
      // No need to clear
      break;
    }
    case SYMPTOMATIC_OR_TRACING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SYMPTOMATIC_OR_TRACING_NOT_SET;
}

void DiseaseModel_DiseaseState::clear_dwell_time_distribution() {
// @@protoc_insertion_point(one_of_clear_start:loimos.proto.DiseaseModel.DiseaseState)
  switch (dwell_time_distribution_case()) {
    case kUniform: {
      delete dwell_time_distribution_.uniform_;
      break;
    }
    case kNormal: {
      delete dwell_time_distribution_.normal_;
      break;
    }
    case kFixed: {
      delete dwell_time_distribution_.fixed_;
      break;
    }
    case kForever: {
      delete dwell_time_distribution_.forever_;
      break;
    }
    case kHistogram: {
      delete dwell_time_distribution_.histogram_;
      break;
    }
    case DWELL_TIME_DISTRIBUTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = DWELL_TIME_DISTRIBUTION_NOT_SET;
}


void DiseaseModel_DiseaseState::Clear() {
// @@protoc_insertion_point(message_clear_start:loimos.proto.DiseaseModel.DiseaseState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transition_set_.Clear();
  state_label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&infectivity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incapacitation_) -
      reinterpret_cast<char*>(&infectivity_)) + sizeof(incapacitation_));
  clear_prodrome_or_vulnerability();
  clear_symptomatic_or_tracing();
  clear_dwell_time_distribution();
  _internal_metadata_.Clear();
}

const char* DiseaseModel_DiseaseState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string state_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_state_label(), ptr, ctx, "loimos.proto.DiseaseModel.DiseaseState.state_label");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double infectivity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          infectivity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double susceptibility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          susceptibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double incapacitation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          incapacitation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 prodrome = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_prodrome(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vulnerability = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_vulnerability(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 symptomatic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_symptomatic(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tracing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_tracing(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Dist_Uniform uniform = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Dist_Normal normal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Dist_Fixed fixed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Dist_Forever forever = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_forever(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Dist_Histogram histogram = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogram(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet transition_set = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transition_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiseaseModel_DiseaseState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:loimos.proto.DiseaseModel.DiseaseState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string state_label = 1;
  if (this->state_label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state_label().data(), static_cast<int>(this->_internal_state_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "loimos.proto.DiseaseModel.DiseaseState.state_label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_state_label(), target);
  }

  // double infectivity = 2;
  if (!(this->infectivity() <= 0 && this->infectivity() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_infectivity(), target);
  }

  // double susceptibility = 3;
  if (!(this->susceptibility() <= 0 && this->susceptibility() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_susceptibility(), target);
  }

  // double incapacitation = 4;
  if (!(this->incapacitation() <= 0 && this->incapacitation() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_incapacitation(), target);
  }

  // int32 prodrome = 5;
  if (_internal_has_prodrome()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_prodrome(), target);
  }

  // int32 vulnerability = 6;
  if (_internal_has_vulnerability()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_vulnerability(), target);
  }

  // int32 symptomatic = 7;
  if (_internal_has_symptomatic()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_symptomatic(), target);
  }

  // int32 tracing = 8;
  if (_internal_has_tracing()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_tracing(), target);
  }

  // .Dist_Uniform uniform = 9;
  if (_internal_has_uniform()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::uniform(this), target, stream);
  }

  // .Dist_Normal normal = 10;
  if (_internal_has_normal()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::normal(this), target, stream);
  }

  // .Dist_Fixed fixed = 11;
  if (_internal_has_fixed()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::fixed(this), target, stream);
  }

  // .Dist_Forever forever = 12;
  if (_internal_has_forever()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::forever(this), target, stream);
  }

  // .Dist_Histogram histogram = 13;
  if (_internal_has_histogram()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::histogram(this), target, stream);
  }

  // repeated .loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet transition_set = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transition_set_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(14, this->_internal_transition_set(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:loimos.proto.DiseaseModel.DiseaseState)
  return target;
}

size_t DiseaseModel_DiseaseState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:loimos.proto.DiseaseModel.DiseaseState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .loimos.proto.DiseaseModel.DiseaseState.StateTransitionSet transition_set = 14;
  total_size += 1UL * this->_internal_transition_set_size();
  for (const auto& msg : this->transition_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string state_label = 1;
  if (this->state_label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state_label());
  }

  // double infectivity = 2;
  if (!(this->infectivity() <= 0 && this->infectivity() >= 0)) {
    total_size += 1 + 8;
  }

  // double susceptibility = 3;
  if (!(this->susceptibility() <= 0 && this->susceptibility() >= 0)) {
    total_size += 1 + 8;
  }

  // double incapacitation = 4;
  if (!(this->incapacitation() <= 0 && this->incapacitation() >= 0)) {
    total_size += 1 + 8;
  }

  switch (prodrome_or_vulnerability_case()) {
    // int32 prodrome = 5;
    case kProdrome: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_prodrome());
      break;
    }
    // int32 vulnerability = 6;
    case kVulnerability: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vulnerability());
      break;
    }
    case PRODROME_OR_VULNERABILITY_NOT_SET: {
      break;
    }
  }
  switch (symptomatic_or_tracing_case()) {
    // int32 symptomatic = 7;
    case kSymptomatic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_symptomatic());
      break;
    }
    // int32 tracing = 8;
    case kTracing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tracing());
      break;
    }
    case SYMPTOMATIC_OR_TRACING_NOT_SET: {
      break;
    }
  }
  switch (dwell_time_distribution_case()) {
    // .Dist_Uniform uniform = 9;
    case kUniform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dwell_time_distribution_.uniform_);
      break;
    }
    // .Dist_Normal normal = 10;
    case kNormal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dwell_time_distribution_.normal_);
      break;
    }
    // .Dist_Fixed fixed = 11;
    case kFixed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dwell_time_distribution_.fixed_);
      break;
    }
    // .Dist_Forever forever = 12;
    case kForever: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dwell_time_distribution_.forever_);
      break;
    }
    // .Dist_Histogram histogram = 13;
    case kHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dwell_time_distribution_.histogram_);
      break;
    }
    case DWELL_TIME_DISTRIBUTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiseaseModel_DiseaseState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:loimos.proto.DiseaseModel.DiseaseState)
  GOOGLE_DCHECK_NE(&from, this);
  const DiseaseModel_DiseaseState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiseaseModel_DiseaseState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:loimos.proto.DiseaseModel.DiseaseState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:loimos.proto.DiseaseModel.DiseaseState)
    MergeFrom(*source);
  }
}

void DiseaseModel_DiseaseState::MergeFrom(const DiseaseModel_DiseaseState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:loimos.proto.DiseaseModel.DiseaseState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transition_set_.MergeFrom(from.transition_set_);
  if (from.state_label().size() > 0) {

    state_label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_label_);
  }
  if (!(from.infectivity() <= 0 && from.infectivity() >= 0)) {
    _internal_set_infectivity(from._internal_infectivity());
  }
  if (!(from.susceptibility() <= 0 && from.susceptibility() >= 0)) {
    _internal_set_susceptibility(from._internal_susceptibility());
  }
  if (!(from.incapacitation() <= 0 && from.incapacitation() >= 0)) {
    _internal_set_incapacitation(from._internal_incapacitation());
  }
  switch (from.prodrome_or_vulnerability_case()) {
    case kProdrome: {
      _internal_set_prodrome(from._internal_prodrome());
      break;
    }
    case kVulnerability: {
      _internal_set_vulnerability(from._internal_vulnerability());
      break;
    }
    case PRODROME_OR_VULNERABILITY_NOT_SET: {
      break;
    }
  }
  switch (from.symptomatic_or_tracing_case()) {
    case kSymptomatic: {
      _internal_set_symptomatic(from._internal_symptomatic());
      break;
    }
    case kTracing: {
      _internal_set_tracing(from._internal_tracing());
      break;
    }
    case SYMPTOMATIC_OR_TRACING_NOT_SET: {
      break;
    }
  }
  switch (from.dwell_time_distribution_case()) {
    case kUniform: {
      _internal_mutable_uniform()->::Dist_Uniform::MergeFrom(from._internal_uniform());
      break;
    }
    case kNormal: {
      _internal_mutable_normal()->::Dist_Normal::MergeFrom(from._internal_normal());
      break;
    }
    case kFixed: {
      _internal_mutable_fixed()->::Dist_Fixed::MergeFrom(from._internal_fixed());
      break;
    }
    case kForever: {
      _internal_mutable_forever()->::Dist_Forever::MergeFrom(from._internal_forever());
      break;
    }
    case kHistogram: {
      _internal_mutable_histogram()->::Dist_Histogram::MergeFrom(from._internal_histogram());
      break;
    }
    case DWELL_TIME_DISTRIBUTION_NOT_SET: {
      break;
    }
  }
}

void DiseaseModel_DiseaseState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:loimos.proto.DiseaseModel.DiseaseState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiseaseModel_DiseaseState::CopyFrom(const DiseaseModel_DiseaseState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:loimos.proto.DiseaseModel.DiseaseState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiseaseModel_DiseaseState::IsInitialized() const {
  return true;
}

void DiseaseModel_DiseaseState::InternalSwap(DiseaseModel_DiseaseState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transition_set_.InternalSwap(&other->transition_set_);
  state_label_.Swap(&other->state_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(infectivity_, other->infectivity_);
  swap(susceptibility_, other->susceptibility_);
  swap(incapacitation_, other->incapacitation_);
  swap(prodrome_or_vulnerability_, other->prodrome_or_vulnerability_);
  swap(symptomatic_or_tracing_, other->symptomatic_or_tracing_);
  swap(dwell_time_distribution_, other->dwell_time_distribution_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiseaseModel_DiseaseState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiseaseModel::InitAsDefaultInstance() {
}
class DiseaseModel::_Internal {
 public:
};

DiseaseModel::DiseaseModel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loimos.proto.DiseaseModel)
}
DiseaseModel::DiseaseModel(const DiseaseModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      disease_state_(from.disease_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  // @@protoc_insertion_point(copy_constructor:loimos.proto.DiseaseModel)
}

void DiseaseModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiseaseModel_disease_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiseaseModel::~DiseaseModel() {
  // @@protoc_insertion_point(destructor:loimos.proto.DiseaseModel)
  SharedDtor();
}

void DiseaseModel::SharedDtor() {
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiseaseModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiseaseModel& DiseaseModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiseaseModel_disease_2eproto.base);
  return *internal_default_instance();
}


void DiseaseModel::Clear() {
// @@protoc_insertion_point(message_clear_start:loimos.proto.DiseaseModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disease_state_.Clear();
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DiseaseModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_label(), ptr, ctx, "loimos.proto.DiseaseModel.label");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .loimos.proto.DiseaseModel.DiseaseState disease_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disease_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiseaseModel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:loimos.proto.DiseaseModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "loimos.proto.DiseaseModel.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // repeated .loimos.proto.DiseaseModel.DiseaseState disease_state = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_disease_state_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_disease_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:loimos.proto.DiseaseModel)
  return target;
}

size_t DiseaseModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:loimos.proto.DiseaseModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .loimos.proto.DiseaseModel.DiseaseState disease_state = 2;
  total_size += 1UL * this->_internal_disease_state_size();
  for (const auto& msg : this->disease_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string label = 1;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiseaseModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:loimos.proto.DiseaseModel)
  GOOGLE_DCHECK_NE(&from, this);
  const DiseaseModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiseaseModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:loimos.proto.DiseaseModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:loimos.proto.DiseaseModel)
    MergeFrom(*source);
  }
}

void DiseaseModel::MergeFrom(const DiseaseModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:loimos.proto.DiseaseModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disease_state_.MergeFrom(from.disease_state_);
  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
}

void DiseaseModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:loimos.proto.DiseaseModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiseaseModel::CopyFrom(const DiseaseModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:loimos.proto.DiseaseModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiseaseModel::IsInitialized() const {
  return true;
}

void DiseaseModel::InternalSwap(DiseaseModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  disease_state_.InternalSwap(&other->disease_state_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiseaseModel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace loimos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet_StateTransition* Arena::CreateMaybeMessage< ::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet_StateTransition >(Arena* arena) {
  return Arena::CreateInternal< ::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet_StateTransition >(arena);
}
template<> PROTOBUF_NOINLINE ::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet* Arena::CreateMaybeMessage< ::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet >(Arena* arena) {
  return Arena::CreateInternal< ::loimos::proto::DiseaseModel_DiseaseState_StateTransitionSet >(arena);
}
template<> PROTOBUF_NOINLINE ::loimos::proto::DiseaseModel_DiseaseState* Arena::CreateMaybeMessage< ::loimos::proto::DiseaseModel_DiseaseState >(Arena* arena) {
  return Arena::CreateInternal< ::loimos::proto::DiseaseModel_DiseaseState >(arena);
}
template<> PROTOBUF_NOINLINE ::loimos::proto::DiseaseModel* Arena::CreateMaybeMessage< ::loimos::proto::DiseaseModel >(Arena* arena) {
  return Arena::CreateInternal< ::loimos::proto::DiseaseModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
