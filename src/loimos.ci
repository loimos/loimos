// Copyright 2020 The Loimos Project Developers.
// See the top-level LICENSE file for details.
//
// SPDX-License-Identifier: MIT

mainmodule loimos {
  include "Interaction.h";
  include "Message.h";

  include "vector";

  readonly CProxy_Main mainProxy;
  readonly CProxy_People peopleArray;
  readonly CProxy_Locations locationsArray;
  readonly CProxy_DiseaseModel globDiseaseModel;
  readonly int numPeople;
  readonly int numLocations;
  readonly int numPeoplePartitions;
  readonly int numLocationPartitions;
  readonly int numDays;

  readonly bool syntheticRun;
  readonly int contactModelType;
  readonly int firstPersonIdx;
  readonly int firstLocationIdx;
  readonly std::string scenarioPath;
  readonly std::string scenarioId;

  readonly uint64_t totalVisits;
  readonly double simulationStartTime;
  readonly double iterationStartTime;

  readonly int synPeopleGridWidth;
  readonly int synPeopleGridHeight;
  readonly int synLocationGridWidth;
  readonly int synLocationGridHeight;
  readonly int synLocalLocationGridWidth;
  readonly int synLocalLocationGridHeight;
  readonly int synLocationPartitionGridWidth;
  readonly int synLocationPartitionGridHeight;
  readonly int averageDegreeOfVisit;

  mainchare Main {
    entry Main(CkArgMsg*);
    entry void run() {
      for(day = 0; day < numDays; day++) {
        serial {
          iterationStartTime = CkWallTimer();
          // CkPrintf("Sending Visit Messages\n");
          peopleArray.SendVisitMessages();
          // CkPrintf("QD Visit Messages\n");
          CkStartQD(CkCallback(
            CkIndex_Main::StartComputingInteractions(),
            mainProxy
          ));
        }
        when StartComputingInteractions() {
          serial {
            // CkPrintf("Compute Interactions\n");
            locationsArray.ComputeInteractions();
            // CkPrintf("QD Compute Interactions\n");
            CkStartQD(CkCallback(
              CkIndex_Main::ComputedInteractions(),
              mainProxy
            ));
          }
        }
        when ComputedInteractions() {
          serial {
            // CkPrintf("Reporting Stats\n");
            peopleArray.EndOfDayStateUpdate();
          }
        }
        when ReceiveInfectiousCount(int infectiousCount) {
          serial {
            // Use this count as desired here
            
            // Print how long this iteration took to run
            CkPrintf(
              "Iteration %d Execution Time: %lf seconds.\n",
              day, CkWallTimer() - iterationStartTime
            );
          }
        }
      }
      serial { 
        CkPrintf("\nFinished data loading in %lf seconds.\n", simulationStartTime);
        CkPrintf("Finished simulating %d days in %lf seconds.\n", numDays, (CkWallTimer() - simulationStartTime));
        
        peopleArray.SendStats();
      }
      when ReceiveStats(CkReductionMsg *summary) {
        serial {
          int *data = reinterpret_cast<int *>(summary->getData());
          SaveStats(data);
        }
      }
      serial {
        CkExit(); 
      }
    };
    entry void StartComputingInteractions(); 
    entry void ComputedInteractions();
    entry [reductiontarget] void ReceiveInfectiousCount(int infectiousCount);
    entry [reductiontarget] void ReceiveStats(CkReductionMsg *summary);
  };

  array [1D] People {
    entry People();
    entry void SendVisitMessages(); // calls ReceiveVisitMessages
#ifdef USE_TRAM
    entry [aggregate] void ReceiveInteractions(InteractionMessage);
#else
    entry void ReceiveInteractions(InteractionMessage);
#endif
    entry void EndOfDayStateUpdate(); // contribute call to ReceiveInfectiousCount
    entry void SendStats(); // contribute call to ReceiveStats
  };

  array [1D] Locations {
    entry Locations();
#ifdef USE_TRAM
    entry [aggregate] void ReceiveVisitMessages(VisitMessage);
#else
    entry void ReceiveVisitMessages(VisitMessage);
#endif
    entry void ComputeInteractions(); // calls ReceiveInteractions
  };

  nodegroup DiseaseModel {
      entry DiseaseModel(std::string pathToModel, std::string scenarioPath);
  };
};
